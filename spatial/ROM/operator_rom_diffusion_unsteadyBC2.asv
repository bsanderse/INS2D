function [yDiff_bc,Diff,Diff_inhom] = operator_rom_diffusion_unsteadyBC2(P,options)
% precompute convective operators
% projection with generic matrix P, size M x NV
% for momentum equation, P is B' or B'*Om_inv
% for Poisson equation, P is Bp'*M*Om_inv

B   = options.rom.B;
phi_inhom = options.rom.phi_inhom;

Diffu  = options.discretization.Diffu;
Diffv  = options.discretization.Diffv;

Diff_   = P*blkdiag(Diffu, Diffv)*B;
Diff_inhom_ = P*blkdiag(Diffu, Diffv)*phi_inhom;

phi_bc = options.rom_phi_bc;
M_bc = size(phi_bc,2);

for i = 1:M_bc
    yBC = phi_bc(:,i);
    options = set_bc_vectors_from_yBC(t,options,yBC);
    
    yAu_ux = options.discretization.yAu_ux;
    yAu_uy = options.discretization.yAu_uy;
    yAv_vx = options.discretization.yAv_vx;
    yAv_vy = options.discretization.yAv_vy;
    
    yIu_ux = options.discretization.yIu_ux;
    yIv_uy = options.discretization.yIv_uy;
    yIu_vx = options.discretization.yIu_vx;
    yIv_vy = options.discretization.yIv_vy;
    
    y_A(:,i) = [yAu_ux;yAu_uy;yAv_vx;yAv_vy];
    y_I(:,i) = [yIu_ux;yIv_uy;yIu_vx;yIv_vy];
    
    yDiffu1 = options.bc_options1.discretization.yDiffu;
    yDiffv1 = options.bc_options1.discretization.yDiffv;
    yDiff_ = P*[yDiffu1; yDiffv1];
end 

yDiffu1 = options.bc_options1.discretization.yDiffu;
yDiffv1 = options.bc_options1.discretization.yDiffv;
yDiff0_1 = P*[yDiffu1; yDiffv1];

yDiffu2 = options.bc_options2.discretization.yDiffu;
yDiffv2 = options.bc_options2.discretization.yDiffv;
yDiff0_2 = P*[yDiffu2; yDiffv2];



Diff   = Diff_;
Diff_inhom = Diff_inhom_;
yDiff_bc = [yDiff0_1, yDiff0_2];


